package {				import flash.display.MovieClip;	import flash.media.Sound;	import flash.text.TextField;	import flash.media.SoundChannel;	import flash.utils.ByteArray;	import flash.events.Event;	import flash.events.ProgressEvent;	import flash.events.SampleDataEvent;	import flash.net.*;	import flash.utils.Endian;	import flash.events.IOErrorEvent;	import flash.geom.ColorTransform;		import flash.geom.Rectangle;	import flash.events.*;	import flash.utils.*;	import flash.utils.Timer;	import flash.events.TimerEvent;	import fl.controls.Slider;	import fl.controls.CheckBox;	import fl.events.SliderEvent; 	import ALF;				public class ALFTest extends MovieClip{						private var str:String;		//String for audio filename		private var myALF:ALF;		//ALF object				//Benchmarking		public var time1:Number;		public var time2:Number;		public var total:Number;				//Features		public var inten:Number, cent:Number, band:Number, roll:Number, flux:Number;		var centArr:Array, bandArr:Array, intenArr:Array, rollArr:Array, fluxArr:Array, magArr:Array;				//Buttons		public var reverbStatus:Boolean = false;		public var reverbActive:String = "off";				//Utilities		var i:uint = 0;		var count:uint = 0;				//Display		var vidFrame:uint = 0;		var line:MovieClip;		var colorChange:ColorTransform;		var lineArr:Array;		var boundRect:Rectangle = new Rectangle(0, 0, 200, 200);				//Room Stuff		private const roomXwidth:Number = 8; //8 meters wide		private const roomYwidth:Number = 8;		private const roomZheight:Number = 3;				private var srcX:Number = 0;		private var srcY:Number = 0;		private const srcZ:Number = 2;		//make the src height always 2 meters high				private var micX:Number = 0;		private var micY:Number = 0;		private const micZ:Number = 2;		//mic height should be approximately 2 meters, ~6feet				private var echoStrength:Number = 0.5;				public function ALFTest(){			//str = 'http://schubert.ece.drexel.edu/~raym/sound_files/SA1.wav';			//str = 'http://music.ece.drexel.edu/~jscott/audio/SA1_22kHz.mp3';			str = 'http://music.ece.drexel.edu/~jscott/audio/Good Times Bad Times.mp3';			//str = "../ALFMusic/Good Times Bad Times.wav";			//str = "../ALFMusic/Good Times Bad Times.mp3";			// Storage Arrays			centArr = new Array();			bandArr = new Array();			intenArr = new Array();			rollArr = new Array();			fluxArr = new Array();			magArr = new Array();									// Initialize objects for drawing			lineArr = new Array();			line = new MovieClip();			lineArr.push(line);			line.graphics.lineStyle( 1, 0xFF0000, 1000);			line.graphics.moveTo(0, 400);			addChild(line);			// Initialize ALF			myALF = new ALF(str, 22, true);									myALF.addEventListener(myALF.NEW_FRAME, onFrame);						myALF.addEventListener(myALF.FILE_LOADED, audioLoaded);				myALF.addEventListener(myALF.FILE_COMPLETE, audioFinished);						//graphics and such...			// Set initial color values			colorChange = this.transform.colorTransform;			colorChange.redOffset = 0;			colorChange.greenOffset = 0;			colorChange.blueOffset = 0;						//room stuff			theRoom.addChild(theSpeaker);			theRoom.addChild(theMic);						theSpeaker.addEventListener(MouseEvent.MOUSE_DOWN, iconSelected);			theMic.addEventListener(MouseEvent.MOUSE_DOWN, iconSelected);			theSlider.addEventListener(SliderEvent.CHANGE, sliderValueChanged);						theSlider.maximum = 100;			theSlider.snapInterval = 10;			theSlider.tickInterval = 10;						theSpeaker.x = 50; theSpeaker.y = 50;			theMic.x = 100; theMic.y = 100;			//labeling			brightnessBtn.label = "";			fluxBtn.label = "";			bandwidthBtn.label = "";			intensityBtn.label = "";			rolloffBtn.label = "";						brightnessBtn.selected = false;			fluxBtn.selected = false;			bandwidthBtn.selected = false;			intensityBtn.selected = false;			rolloffBtn.selected = false;		}		public function onFrame(event:Event):void{						//plotFeatures();						//check for selected features			if(brightnessBtn.selected) {				cent = myALF.getBrightness();				centArr.push(cent);				brightnessVal.text = (cent.toFixed(2)).toString() + ' Hz';			}			if(intensityBtn.selected) {				inten = myALF.getIntensity();				intenArr.push(inten);				intensityVal.text = (inten.toFixed(2)).toString();			}			if(rolloffBtn.selected) {				roll = myALF.getRolloff();				rollArr.push(roll);				rolloffVal.text = (roll.toFixed(2)).toString() + ' Hz';			}			if(fluxBtn.selected) {				flux = myALF.getFlux();				fluxArr.push(flux);				fluxVal.text = (flux.toFixed(2)).toString();			}			if(bandwidthBtn.selected) {				band = myALF.getBandwidth();				bandArr.push(band);				bandwidthVal.text = (band.toFixed(2)).toString() + ' Hz';			}						//testing getHarmonics function			//myALF.getHarmonics(15);						if(reverbActive == "on") {				//if reverb is on, get the src and mic positions				micX = (theMic.x/theRoom.x * roomXwidth);				micY = (theMic.y/theRoom.y * roomYwidth);				srcX = (theSpeaker.x/theRoom.x * roomXwidth);				srcY = (theSpeaker.y/theRoom.y * roomYwidth);			}			//reverbDemo is undocumented, but allows full access to the DATF parameters			myALF.reverbDemo(reverbActive, 2, echoStrength, roomXwidth, roomYwidth, roomZheight,						 srcX, srcY, srcZ,						 micX, micY, micZ);						//"reverb" is the real ALF function			//myALF.reverb(reverbActive, 2, 2, "big");		}				public function audioLoaded(event:Event):void{						trace('loaded');			initButtons();		}						public function initButtons():void{										playButton.buttonMode = true;			stopButton.buttonMode = true;			pauseButton.buttonMode = true;			playButton.addEventListener(MouseEvent.CLICK, playHandler);			stopButton.addEventListener(MouseEvent.CLICK, stopHandler);			pauseButton.addEventListener(MouseEvent.CLICK, pauseHandler);			reverbButton.addEventListener(MouseEvent.CLICK, reverbHandler);		}				public function sliderValueChanged(evt:SliderEvent):void {			echoStrength = evt.value/100;		}				public function reverbHandler(event:Event):void {			if(reverbStatus) {				//if its on, turn it off				reverbStatus = false;				reverbActive = "off";				reverbButton.alpha = 1;			} else {				//of its off, turn it on				reverbStatus = true;				reverbActive = "on";				reverbButton.alpha = .5;			}		}				public function playHandler(event:Event):void{			myALF.startAudio();		}				public function stopHandler(event:Event):void{			myALF.stopAudio();		}				public function pauseHandler(event:Event):void{			myALF.pauseAudio();		}		public function audioFinished(event:Event):void{						trace('audioFinished'); 			trace('---------------------------------------');		}				//room handling features....		public function iconSelected(evt:Event):void {			evt.target.addEventListener(MouseEvent.MOUSE_UP, iconReleased);			evt.target.startDrag(false, boundRect);		}				public function iconReleased(evt:Event):void {			evt.target.stopDrag();		}				public function plotFeatures(){						inten = myALF.getIntensity();			cent = myALF.getBrightness();			band = myALF.getBandwidth();			roll = myALF.getRolloff();			flux = myALF.getFlux();			// Store cent value			centArr.push(cent);							// End of video frame, reset to beginning 			if(count > 550){								vidFrame++;				for(i = 0; i < lineArr.length; i++){					lineArr[i].graphics.clear();				}				line.graphics.moveTo(0, 400);				count = 0;			}						// Handle bad values			if(isNaN(cent)) {cent = 0;}						if(isNaN(band)) {band = 0;}					if(isNaN(inten)){inten = 0;}			if(isNaN(roll)) {roll = 0;}			if(isNaN(flux)) {flux = 0;}								// For averaging over frames			if(count > 12){								for(i = 0; i < centArr.length; i++){					cent = cent + centArr[i];									}								cent = cent/centArr.length;									centArr.shift();			}						//trace('centavg = '+cent);						// Set color change			colorChange.redOffset = cent/50;			colorChange.greenOffset = cent/50;						// Apply color change and draw line										line.graphics.lineStyle( int(Math.pow(band/2000,1.2)), 0x000000, 1000);			line.transform.colorTransform = colorChange;			line.graphics.lineTo(count, 400 - inten/30);						addChild(line);			// Set up for draw on next frame			line = new MovieClip();			lineArr.push(line);			line.graphics.moveTo(count, 400 - inten/30);			// Increment counter			count = count + 3;								if(vidFrame > 3){				myALF.stopAudio();			}					}	}}